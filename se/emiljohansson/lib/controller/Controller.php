<?php

/**
 *	{LIBRARY_NAME}
 *
 *	PHP Version 5.3
 *
 *	@copyright	Emil Johansson 2013
 *	@license	http://www.opensource.org/licenses/mit-license.php MIT
 *	@link		https://github.com/emiljohansson
 */

//-----------------------------------------------------------
//	Public class
//-----------------------------------------------------------

/**
 *	The Controller object manages what data that will be presented to the user.
 *
 *	By default the controller is generated by the Engine, based on the 
 *	URL's controller parameter. The Controller initializes what model and view
 *	will be used, what data the user will be presented with.
 *	
 *	The Controller can automaticly handle three default URL GET parameters:
 *	<ul>
 *		<li>service:	A service for presenting and manipulating data.</li>
 *		<li>method: 	The method that will be called in the service.</li>
 *		<li>output: 	Was suppose to be which format (xml, json) the data would be
 *						presented in, but is mostly used for selecting id:s.</li>
 *	</ul>
 *
 *	@version	0.1.0
 *	@author		Emil Johansson <emiljohansson.se@gmail.com>
 *	@todo		Support json output.
 */
class Controller {

	//-----------------------------------------------------------
	//	Public properties
	//-----------------------------------------------------------

	/**
	 *	The data model.
	 *	@var Model
	 */
	public $model;

	/**
	 *	The presentation view.
	 *	@var View
	 */
	public $view;

	/**
	 *	Possible output from the http-request.
	 *	@var mixed
	 */
	public $output;

	//-----------------------------------------------------------
	//	Protected properties
	//-----------------------------------------------------------

	/**
	 * A service (Controller) generated from the URL.
	 * @var Service
	 */
	protected $service;

	//-----------------------------------------------------------
	//	Constructor method
	//-----------------------------------------------------------

	/**
	 *	Initializes the model and view.
	 *	
	 *	@return	void
	 */
	public function __construct() {
		$this->initModel();
		$this->initView();
	}

	//-----------------------------------------------------------
	//	Public methods
	//-----------------------------------------------------------
	
	/**
	 *	Adds the view to the widget.
	 *	
	 *	@param	Widget	$container
	 *	@return	void
	 */
	public function go(Widget $container) {
		$container->add($this->view->asWidget());
	}

	//-----------------------------------------------------------
	//	Protected methods
	//-----------------------------------------------------------

	/**
	 *	No model is by default initialized, override method to 
	 *	create a model.
	 *	
	 *	@return	void
	 */
	protected function initModel() {}

	/**
	 *	Initializes the default view.
	 *	
	 *	@return	void
	 */
	protected function initView() {
		$this->view	= new View();
	}

	/**
	 *	Uses the URL parameter 'service' to create a matching
	 *	service object.
	 *	
	 *	@return	void
	 */
	protected function initService() {
		if (!isset($_GET['service'])) return;
		$className = $_GET['service']."Service";
		if (!class_exists($className)) return;
		$this->service = new $className();
	}

	/**
	 *	If a Service object is initialized, the method uses the 
	 *	URL parameter 'method' to call that method in the service.
	 *	
	 *	@return	void
	 */
	protected function initMethod() {
		if (!isset($this->service)) return;
		if (!isset($_GET['method'])) return;
		$method	= $_GET['method'];
		if (!method_exists($this->service, $method)) return;
		$this->service->$method();
	}

	/**
	 *	Stores the value from the URL parameter, 'output' and 
	 *	also sets the value in the service.
	 *	
	 *	@return	void
	 */
	protected function initOutput() {
		if (!isset($_GET['output'])) return;
		$this->output = $_GET['output'];
		if (!isset($this->service)) return;
		$this->service->output = $this->output;
	}

	/**
	 *	Binds the model to the view.
	 *	
	 *	@return	void
	 */
	protected function bind() {
		if (!isset($this->view) || !isset($this->model)) return;
		$this->view->model = $this->model;
	}
}